PRELIMINARY DESIGN REPORT

1. MIPS Program 1

Program Requirements: 
- Creates an array of maximum size of 20 elements that asks the user first the number of elements and then enters the elements one by one. 
- Displays array contents
- Reverses the array contents and displays the array (for example 1, 2, 3 becomes 3, 2, 1).

Program Code:

## Lab 1 Preliminary Work
## Program 1
## Enter array elements up to size 20 then print

	.text
	.globl __start
	
__start:
	# Print prompt for array size
	la $a0, pmt1
	li $v0, 4
	syscall
	
	# Get array size
	li $v0, 5
	syscall
	sw $v0, size
	
	# Invalid size handling
	
	li $a0, -1
	
	blt $v0, 1, array_size_error
	bge $v0, 20, array_size_error
	
	li $a0, 0
	
	# Get array elements	
	lw $t0, size
	li $t1, 0 # index
	li $t2, 0 # address index
	
array_size_error:
	
	bne $a0, -1, write_loop
	
	la $a0, pmt0
	li $v0, 4
	syscall
	
	j __start
	
write_loop:
	# Loop exit condition
	bge $t1, $t0, print_unreversed
	
	# Print prompt for next element
	la $a0, pmt2
	li $v0, 4
	syscall
	
	# Get next element
	li $v0, 5
	syscall
	sw $v0, arr($t2)
	
	# Loop iteration handling
	addi $t1, $t1, 1
	addi $t2, $t2, 4
	j write_loop
	
# Print array first
print_unreversed:
	j print
	
prepare_to_reverse:
	li $a1, -1

	# Prepare for reversing the array
	move $t3, $t0
	subi $t3, $t3, 1
	li $t4, 4 # Multiplication constant
	
	# $t0 = array size
	li $t1, 0 # array index from left
	mul $t2, $t3, $t4 # array index from right
	
# Reverse array
reverse:
	# Loop condition
	bge $t1, $t2, print
	
	# Swap logic, t3 holds value from left, t4 value from right
	lw $t3, arr($t1)
	lw $t4, arr($t2)
	
	sw $t3, arr($t2)
	sw $t4, arr($t1)
	
	# Increment left index and decrement right index
	addi $t1, $t1, 4
	subi $t2, $t2, 4
	
	j reverse
	
# Print array
print:
	# Print prompt for printing array
	la $a0, pmt3
	li $v0, 4
	syscall
	
	# Prepare next loop
	# t0 = array size
	li $t1, 0 # array index
	li $t2, 0 # address index
	
print_loop:
	# Loop exit condition
	beq $t0, $t1, exit_print_loop

	# Get next element
	lw $a0, arr($t2)
	li $v0, 1
	syscall
	
	# Loop iteration handling
	addi $t1, $t1, 1
	addi $t2, $t2, 4
	
	# If not last element
	blt $t1, $t0, print_comma
	
	j print_loop

# Prints comma in between numbers while printing the array
print_comma: 
	bge $t1, $t0, exit_print_loop
	
	la $a0, comma
	li $v0, 4
	syscall
	
	j print_loop

exit_print_loop:
	
	bne $a1, -1, prepare_to_reverse
	
	# End of Program
	li $v0, 10
	syscall
	
	.data
pmt0:	.asciiz "Array size invalid. Try again.\n"
pmt1:	.asciiz "Enter the size of your array: "
pmt2:	.asciiz "Enter next element: "
pmt3:	.asciiz "\nPrinting array: \n"
comma:	.asciiz ", "
size:	.word	0
arr:	.space	80 # Preallocate array for 20 elements



2. MIPS Program 2

Program Requirements: 
	Implements the following expression without using div. If necessary use instructions other that we have seen in the class.
	x = (c - d) % 2


Program Code:

## Lab 1 Preliminary Work
## Program 2
## x = (c - d) & 2

	.text
	.globl __start
	
__start:
	la $a0, prompt1
	li $v0, 4
	syscall # Output prompt
	
	li $v0, 5
	syscall # Take input c
	sw $v0, c
	
	la $a0, prompt2
	li $v0, 4
	syscall # Output prompt
	
	li $v0, 5
	syscall # Take input d
	sw $v0, d
	
	# Inputs are taken
	
	lw $t0, c # c into t0
	lw $t1, d # d into t1
	sub $t2, $t0, $t1 # t2 gets t0 - t1 MEANING t2 = c - d
	andi $t3, $t2, 1 # If (c-d) ends with bit 1 result is 1, else result is 0
	
	# Processing is done
	
	la $a0, prompt3
	li $v0, 4
	syscall # Output prompt
	
	move $a0, $t3
	li $v0, 1
	syscall # Print result
	
	# Result is printed
	
	li $v0, 10
	syscall # End of program	

	.data
c:	.word 0
d:	.word 0
prompt1:.asciiz "Please enter c: "
prompt2:.asciiz "Please enter d: "
prompt3:.asciiz "Result of (c - d) % 2 is "

3. Object Code for Given Instructions

Instructions:

		la	  $t1, a
		la	  $t2, b
		.....
		.data
str:	.asciiz "\nHello\n"
a:	.word   1, 2, 3, 4
b:	.word   1

Object Code with Steps:

1) Breaking la instructions into its parts:

	[la $t1, a] becomes,
		lui $at, 0x1001 # start of data
		ori $t1, $at, 0x0008 # lower half of address of a

	[la $t2, b] becomes,
		lui $at, 0x1001 # start of data
		ori $t2, $at, 0x0018 # lower half of address of b

2) Translating instructions to binary

	[lui $at, 0x1001] becomes, # I-type
		001111 00000 00001 0001_0000_0000_0001

	[ori $t1, $at, 0x0008] becomes, # I-type
		001101 00001 01001 0000_0000_0000_1000

	[lui $at, 0x1001] becomesi # I-type
		001111 00000 00001 0001_0000_0000_0001

	[ori $t2, at, 0x0018] becomes, # I-type
		001101 00001 01010 0000_0000_0001_1000

3) Translate binary to hex

	[001111 00000 00001 0001_0000_0000_0001], becomes
		0x3C011001

	[001101 00001 01001 0000_0000_0000_1000], becomes
		0x34290008
	[001111 00000 00001 0001_0000_0000_0001], becomes
		0x3C011001

	[001101 00001 01010 0000_0000_0001_1000], becomes
		0x342A0018

4. Definition of Given Terms with Examples

a) Symbolic Machine Instruction: These instructions are mnemonics that generally can be translated to machine instructions 1 to 1. Examples: andi, add, lui

b) Machine Instruction: These instructions can be read and executed by the computer immediately. They are in binary. Examples:  001111 00000 00001 0001_0000_0000_0001,  001101 00001 01001 0000_0000_0000_1000 (taken from Part 3).

c) Assembler Directive: These are used to give specific instructions (such as variables are defined here, code is defined here or stop the assembly process) to the assembler. Examples: .text, .data

d) Pseudo Instruction: These instructions are made up of more than one other, simpler instructions which are broken down into its compenents by the assembler during assembly process. Examples: la, move.
