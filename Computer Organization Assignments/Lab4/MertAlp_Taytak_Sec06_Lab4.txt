module top  (input   logic 	 clk, reset,            
	     output  logic[31:0] writedata, dataadr,          
	     output  logic       memwrite,
	     output  logic[31:0] pcOut, instrOut);  

   logic [31:0] pc, instr, readdata;
   assign pcOut = pc;
   assign instrOut = instr;

   // instantiate processor and memories  
   mips mips (clk, reset, pc, instr, memwrite, dataadr, writedata, readdata);  
   imem imem (pc[7:2], instr);  
   dmem dmem (clk, memwrite, dataadr, writedata, readdata);

endmodule

module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//		address		instruction
//		-------		-----------
		8'h00: instr = 32'h20020005;  	// disassemble, by hand 
		8'h04: instr = 32'h2003000c;  	// or with a program,
		8'h08: instr = 32'h2067fff7;  	// to find out what
		8'h0c: instr = 32'h00e22025;  	// this program does!
		8'h10: instr = 32'h00642824;
		8'h14: instr = 32'h00a42820;
		8'h18: instr = 32'h10a7000a;
		8'h1c: instr = 32'h0064202a;
		8'h20: instr = 32'h10800001;
		8'h24: instr = 32'h20050000;
		8'h28: instr = 32'h00e2202a;
		8'h2c: instr = 32'h00853820;
		8'h30: instr = 32'h00e23822;
		8'h34: instr = 32'hac670044;
		8'h38: instr = 32'h8c020050;
		8'h3c: instr = 32'h08000011;
		8'h40: instr = 32'h20020001;
		8'h44: instr = 32'hac020054;
		8'h48: instr = 32'h08000012;	// j 48, so it will loop here
	     default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule

module maindec (input logic[5:0] op, 
	              output logic memtoreg, memwrite, branch,
	              output logic alusrc, regdst, regwrite, jump,
	              output logic[1:0] aluop );
   logic [8:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop, jump} = controls;

  always_comb
    case(op)
        6'b000000: controls <= 9'b110000100; // R-type
        6'b100011: controls <= 9'b101001000; // lw
        6'b101011: controls <= 9'b001010000; // sw
        6'b000100: controls <= 9'b000100010; // beq
        6'b001000: controls <= 9'b101000000; // addi
        6'b000010: controls <= 9'b000000101; // jump
        default:   controls <= 9'bxxxxxxxxx; // illegal op
    endcase
endmodule

module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           output logic zero);

  always_comb
  begin
    case (alucont)
        3'b000: result <= a & b;
        3'b001: result <= a | b;
        3'b010: result <= a + b;
        3'b011: result <= 32'bx; // Not used
        3'b100: result <= a & (~b);
        3'b101: result <= a | (~b);
        3'b110: result <= a - b;
        3'b111: result <= (a - b) >> 31;
        default: result <= 32'bx;
    endcase
    
    zero = (result == 32'b0);
  end
endmodule

module top_testbench();

// Create wires
logic clk, reset, memwrite;
logic[31:0] writedata, dataadr, pc, instr;

// Creating test device
top dut(clk, reset, writedata, dataadr, memwrite, pc, instr);

initial
begin
    // Initialize wires
    clk = 1;
    reset = 1;
    #20;
    reset = 0;
    #20;
end

always
begin
    #20;
    clk = ~clk;
end


endmodule

module testbench_alu();

// Wires
logic [31:0] a, b, result;
logic [2:0] alucont;
logic zero;

// Initialize test device
ALU dut(a, b, alucont, result, zero);

// Test
initial
begin
    a = 13;
    b = 5;
    
    #50;
    
    for (int i = 0; i < 8; i = i + 1)
    begin
        alucont <= i;
        #50;
    end
end

endmodule
