-- Author: Mert Alp Taytak - taytak@kth.se
-- I could not solve the recursive definition problem
-- and I could not find a property for buffers.

-- CTL formulas can be found at the very bottom.

-- Combined transmitter and driver modules into a single module.
-- Seeing how both the transmitter and the driver made extensive use of
-- each other's states and that this code is a one time use assignment
-- it made sense to me to combine them.
-- Sections of the code are labeled in a descriptive manner
-- and it is almost completely converted from the pseudocode provided
-- with slight changes and fixes. Hence explanations for most variables
-- used can be found in the provided resources.
MODULE main
VAR
    -- Control variables
    next_call : {open, transmit, stop}; -- Function to call by CPU
    turn : {software, HW_init, HW_tx, HW_td};
    dead : boolean;

    -- Driver state components
    open_state : {
        open_idle, open_set_reset, open_reset_test,
        open_clear_hdp, open_clear_queue
    };
    transmit_state : {
        transmit_idle, transmit_update_queue,
        transmit_bad_buffer_or_queue_full_or_not_queue_full,
        transmit_updated_new_bd, transmit_check_misqueue
    };
    stop_state : {
        stop_idle, stop_set_teardown, stop_teardown_test, stop_update_queue
    };

    -- Driver hardware components, i.e. variables
    queue_head : word[2];
    queue_tail : word[2];
    new_bd : word[2];

    -- Driver transmit() inputs
    pa : word[2];
    length : word[2];

    -- Transmitter state components
    it_state : {it_idle, it_resetting, it_waiting_hdp};
    tx_state : {
        tx_idle, tx_fetching_bd, tx_reading_memory,
        tx_setting_eoq_or_releasing_bd, tx_releasing_bd
    };
    td_state : {td_idle, td_waiting_for_tx, td_releasing_bd, td_clearing_td};

    -- Transmitter hardware components, i.e. registers
    RESET : word[1];
    HDP : word[2];
    TEARDOWN : word[1];
    HW_MEMORY_NDP : array 0 .. 3 of word[2];
    HW_MEMORY_BP  : array 0 .. 3 of word[2];
    HW_MEMORY_BL  : array 0 .. 3 of word[2];
    HW_MEMORY_OWN : array 0 .. 3 of word[1];
    HW_MEMORY_EOQ : array 0 .. 3 of word[1];

DEFINE
    -- Driver transmit() macros
    TRANSMIT_OVERFLOW := pa + length < pa;
    TRANSMIT_LENGTH_EQ_ZERO := length = 0b2_00;
    TRANSMIT_INSIDE_RAM :=RAM_START <= pa & pa + length - 0b2_01 <= RAM_END;
    TRANSMIT_QUEUE_FULL :=
    	-- Queue is full without wrapping around.
    	(queue_head < queue_tail &
    	    queue_head = HW_MEMORY_START & queue_tail = HW_MEMORY_END)
    	-- Queue is full with wrapping around.
    	| (queue_tail < queue_head & queue_tail + 0b2_01 = queue_head);
    TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL := TRANSMIT_OVERFLOW
        | TRANSMIT_LENGTH_EQ_ZERO | !TRANSMIT_INSIDE_RAM | TRANSMIT_QUEUE_FULL;

    -- General transmitter macros
    HW_MEMORY_START := 0b2_01;
    HW_MEMORY_END := 0b2_11;
    RAM_START := 0b2_01;
    RAM_END := 0b2_10;

    -- Transmission step macros
    TX_BUFFER_OVERFLOW :=
        HW_MEMORY_BP[HDP] + HW_MEMORY_BL[HDP] < HW_MEMORY_BP[HDP];
    TX_BUFFER_INSIDE_RAM :=
        RAM_START <= HW_MEMORY_BP[HDP]
        & HW_MEMORY_BP[HDP] + HW_MEMORY_BL[HDP] - 0b2_01 <= RAM_END;

ASSIGN
    -- Initial control variable values
    init(next_call) := open;
    init(dead) := FALSE;

    -- Initial driver state values
    init(open_state) := open_idle;
    init(transmit_state) := transmit_idle;
    init(stop_state) := stop_idle;

    -- Initial transmitter state values
    init(it_state) := it_idle;
    init(tx_state) := tx_idle;
    init(td_state) := td_idle;

    -- Initial values for registers
    init(RESET) := 0b1_0;
    init(TEARDOWN) := 0b1_0;

    -- Transitions for control variable values
    next(next_call) :=
        case
            next_call = open : {open, transmit, stop};
            next_call = transmit : {transmit, stop};
            next_call = stop : {open, transmit, stop};
            TRUE : next_call;
        esac;

    next(dead) :=
        case
            tx_state = tx_fetching_bd
                & (HW_MEMORY_OWN[HDP] = 0b1_0
                    | HW_MEMORY_EOQ[HDP] = 0b1_1
                    | HW_MEMORY_BL[HDP] = 0b2_00
                    | TX_BUFFER_OVERFLOW
                    | !TX_BUFFER_INSIDE_RAM
                )
                & turn = HW_tx
                :
                TRUE;
            TRUE : dead;
        esac;

    -- Transitions for driver state values
    next(open_state) :=
        case
            -- Invocation of open()
            -- open_state = open_idle
            --     & transmit_state = transmit_idle
            --     & next(transmit_state) = transmit_idle
            --     & stop_state = stop_idle
            --     & next(stop_state) = stop_idle
            --     & turn = software
            --     :
            --     {open_set_reset, open_idle};
            open_state = open_set_reset & turn = software : open_reset_test;
            open_state = open_reset_test
                & RESET != 0b1_1 & turn = software
                :
                open_clear_hdp;
            open_state = open_clear_hdp & turn = software : open_clear_queue;
            open_state = open_clear_queue & turn = software : open_idle;
            TRUE : open_state;
        esac;

    next(transmit_state) :=
        case
            -- Invocation of transmit()
            -- open_state = open_idle
            --     & next(open_state) = open_idle
            --     & transmit_state = transmit_idle
            --     & stop_state = stop_idle
            --     & next(stop_state) = stop_idle
            --     & turn = software
            --     :
            --     {transmit_update_queue, transmit_idle};
            transmit_state = transmit_update_queue
                & !(queue_head != 0b2_00 & HW_MEMORY_OWN[queue_head] = 0b1_0)
                & turn = software
                :
                transmit_bad_buffer_or_queue_full_or_not_queue_full;
            transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                transmit_idle;
            transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP != 0b2_00 & turn = software
                :
                transmit_updated_new_bd;
            transmit_state = transmit_updated_new_bd
                & turn = software
                :
                transmit_check_misqueue;
            transmit_state = transmit_check_misqueue
                & turn = software
                :
                transmit_idle;
            TRUE : transmit_state;
        esac;

    next(stop_state) :=
        case
            -- Invocation of stop
            -- open_state = open_idle
            --     & next(open_state) = open_idle
            --     & transmit_state = transmit_idle
            --     & next(transmit_state) = transmit_idle
            --     & stop_state = stop_idle
            --     & turn = software
            --     :
            --     {stop_set_teardown, stop_idle};
            stop_state = stop_set_teardown
                & turn = software
                :
                stop_teardown_test;
            stop_state = stop_teardown_test
                & TEARDOWN != 0b1_1
                & turn = software
                :
                stop_update_queue;
            stop_state = stop_update_queue
                & turn = software
                :
                stop_idle;
            TRUE : stop_state;
        esac;

    -- Transitions for driver variable values
    next(queue_head) :=
        case
            open_state = open_reset_test
                & next(open_state) = open_idle & turn = software
                :
                0b2_00;
            transmit_state = transmit_update_queue
                & queue_head != 0b2_00
                & HW_MEMORY_OWN[queue_head] = 0b1_0
                & turn = software
                :
                HW_MEMORY_NDP[queue_head];
            !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                HW_MEMORY_START;
            transmit_state = transmit_check_misqueue
                & HW_MEMORY_OWN[queue_tail] = 0b1_0
                & HW_MEMORY_EOQ[queue_tail] = 0b1_1
                & HW_MEMORY_NDP[queue_tail] != 0b2_00 & turn = software
                :
                new_bd;
            stop_state = stop_teardown_test
                & next(stop_state) = stop_idle & turn = software
                :
                0b2_00;
            TRUE : queue_head;
        esac;

    next(queue_tail) :=
        case
            open_state = open_reset_test
                & next(open_state) = open_idle & turn = software
                :
                0b2_00;
            transmit_state = transmit_update_queue
                & !(queue_head != 0b2_00 & HW_MEMORY_OWN[queue_head] = 0b1_0)
                & queue_head = 0b2_00 & turn = software
                :
                0b2_00;
            transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00
                & turn = software
                :
                HW_MEMORY_START;
            transmit_state = transmit_check_misqueue
                & turn = software
                :
                new_bd;
            stop_state = stop_update_queue
                & next(stop_state) = stop_idle & turn = software
                :
                0b2_00;
            TRUE : queue_tail;
        esac;

    next(new_bd) :=
        case
            transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL & HDP != 0b2_00
                & queue_tail = HW_MEMORY_END & turn = software
                :
                HW_MEMORY_START;
            transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL & HDP != 0b2_00
                & queue_tail != HW_MEMORY_END & turn = software
                :
                queue_tail + 0b2_01;
            TRUE : new_bd;
        esac;

    -- Transitions for transmitter state values
    next(it_state) :=
        case
            -- If software sets the RESET, as is done by open()
            it_state = it_idle & RESET = 0b1_0 & next(RESET) = 0b1_1
                & open_state = open_set_reset
                & next(open_state) = open_reset_test
                & turn = software
                :
                it_resetting;
            it_state = it_resetting & turn = HW_init : it_waiting_hdp;
            -- If software clears HDP, as is done by open()
            it_state = it_waiting_hdp & next(HDP) = 0b2_00
                & open_state = open_clear_hdp
                & next(open_state) = open_clear_queue
                & turn = software
                :
                it_idle;
            TRUE : it_state;
        esac;

    next(tx_state) :=
        case
            -- The software writes the HDP register
            tx_state = tx_idle
                & HDP = 0b2_00 & next(HDP) != 0b2_00 & turn = software
                :
                tx_fetching_bd;
            tx_state = tx_fetching_bd
                & !(HW_MEMORY_OWN[HDP] = 0b1_0 | HW_MEMORY_EOQ[HDP] = 0b1_1
                    | HW_MEMORY_BL[HDP] = 0b2_00 | TX_BUFFER_OVERFLOW
                    | !TX_BUFFER_INSIDE_RAM
                )
                & turn = HW_tx
                :
                tx_reading_memory;
            tx_state = tx_reading_memory
                & turn = HW_tx
                :
                tx_setting_eoq_or_releasing_bd;
            tx_state = tx_setting_eoq_or_releasing_bd
                & HW_MEMORY_NDP[HDP] = 0b2_00
                & turn = HW_tx
                :
                tx_releasing_bd;
            tx_state = tx_setting_eoq_or_releasing_bd
                & HW_MEMORY_NDP[HDP] != 0b2_00
                & td_state = td_waiting_for_tx
                & turn = HW_tx
                :
                tx_idle;
            tx_state = tx_setting_eoq_or_releasing_bd
                & HW_MEMORY_NDP[HDP] != 0b2_00
                & td_state != td_waiting_for_tx
                & turn = HW_tx
                :
                tx_fetching_bd;
            tx_state = tx_releasing_bd & turn = HW_tx : tx_idle;
            TRUE : tx_state;
        esac;

    next(td_state) :=
        case
            -- If software activates teardown
            td_state = td_idle
                & TEARDOWN = 0b1_0 & next(TEARDOWN) = 0b1_1 & turn = software
                :
                td_waiting_for_tx;
            td_state = td_waiting_for_tx
                & tx_state = tx_idle & HDP = 0b2_00 & turn = HW_td
                :
                td_idle;
            td_state = td_waiting_for_tx
                & tx_state = tx_idle & HDP != 0b2_00 & turn = HW_td
                :
                td_releasing_bd;
            td_state = td_releasing_bd & turn = HW_td : td_clearing_td;
            td_state = td_clearing_td & turn = HW_td : td_idle;
            TRUE : td_state;
        esac;

    -- Transitions for transmitter register values
    next(RESET) :=
        case
            it_state = it_resetting & turn = HW_init : 0b1_0;
            open_state = open_set_reset
                & next(open_state) = open_reset_test & turn = software
                :
                0b1_1;
            TRUE : RESET;
        esac;

    next(HDP) :=
        case
            tx_state = tx_setting_eoq_or_releasing_bd
                & HW_MEMORY_NDP[HDP] != 0b2_00
                & turn = HW_tx
                :
                HW_MEMORY_NDP[HDP];
            tx_state = tx_releasing_bd & turn = HW_tx : 0b2_00;
            td_state = td_releasing_bd & turn = HW_td : 0b2_00;
            open_state = open_reset_test
                & next(open_state) = open_idle & turn = software
                :
                0b2_00;
            transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                HW_MEMORY_START;
            transmit_state = transmit_check_misqueue
                & HW_MEMORY_OWN[queue_tail] = 0b1_0
                & HW_MEMORY_EOQ[queue_tail] = 0b1_1
                & HW_MEMORY_NDP[queue_tail] != 0b2_00
                & turn = software
                :
                new_bd;
            TRUE : HDP;
        esac;

    next(TEARDOWN) :=
        case
            td_state = td_waiting_for_tx
                & tx_state = tx_idle & HDP = 0b2_00 & turn = HW_td
                :
                0b1_0;
            td_state = td_clearing_td & turn = HW_td : 0b1_0;
            stop_state = stop_set_teardown
                & next(stop_state) = stop_teardown_test & turn = software
                :
                0b1_1;
            TRUE : TEARDOWN;
        esac;

    -- Memory NDP array
    next(HW_MEMORY_NDP[1]) :=
        case
            HW_MEMORY_START = 0b2_01
                & transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                0b2_00;
            new_bd = 0b2_01
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                0b2_00;
            queue_tail = 0b2_01
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                new_bd;
            TRUE : HW_MEMORY_NDP[1];
        esac;
    next(HW_MEMORY_NDP[2]) :=
        case
            HW_MEMORY_START = 0b2_10
                & transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                0b2_00;
            new_bd = 0b2_10
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                0b2_00;
            queue_tail = 0b2_10
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                new_bd;
            TRUE : HW_MEMORY_NDP[2];
        esac;
    next(HW_MEMORY_NDP[3]) :=
        case
            HW_MEMORY_START = 0b2_11
                & transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                0b2_00;
            new_bd = 0b2_11
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                0b2_00;
            queue_tail = 0b2_11
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                new_bd;
            TRUE : HW_MEMORY_NDP[3];
        esac;

    -- Memory BP array
    next(HW_MEMORY_BP[1]) :=
        case
            HW_MEMORY_START = 0b2_01
                & transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                pa;
            new_bd = 0b2_01
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                pa;
            TRUE : HW_MEMORY_BP[1];
        esac;
    next(HW_MEMORY_BP[2]) :=
        case
            HW_MEMORY_START = 0b2_10
                & transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                pa;
            new_bd = 0b2_10
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                pa;
            TRUE : HW_MEMORY_BP[2];
        esac;
    next(HW_MEMORY_BP[3]) :=
        case
            HW_MEMORY_START = 0b2_11
                & transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                pa;
            new_bd = 0b2_11
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                pa;
            TRUE : HW_MEMORY_BP[3];
        esac;

    -- Memory BL array
    next(HW_MEMORY_BL[1]) :=
        case
            HW_MEMORY_START = 0b2_01
                & transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                length;
            new_bd = 0b2_01
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                length;
            TRUE : HW_MEMORY_BL[1];
        esac;
    next(HW_MEMORY_BL[2]) :=
        case
            HW_MEMORY_START = 0b2_10
                & transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                length;
            new_bd = 0b2_10
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                length;
            TRUE : HW_MEMORY_BL[2];
        esac;
    next(HW_MEMORY_BL[3]) :=
        case
            HW_MEMORY_START = 0b2_11
                & transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                length;
            new_bd = 0b2_11
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                length;
            TRUE : HW_MEMORY_BL[3];
        esac;

    -- Memory OWN array
    next(HW_MEMORY_OWN[1]) :=
        case
            HDP = 0b2_01
                & tx_state = tx_setting_eoq_or_releasing_bd
                & HW_MEMORY_NDP[HDP] != 0b2_00
                & turn = HW_tx
                :
                0b1_0;
            HDP = 0b2_01
                & tx_state = tx_releasing_bd & turn = HW_tx
                :
                0b1_0;
            HDP = 0b2_01
                & td_state = td_releasing_bd & turn = HW_td
                :
                0b1_0;
            HW_MEMORY_START = 0b2_01
                & transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                0b1_1;
            new_bd = 0b2_01
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                0b1_1;
            TRUE : HW_MEMORY_OWN[1];
        esac;
    next(HW_MEMORY_OWN[2]) :=
        case
            HDP = 0b2_10
                & tx_state = tx_setting_eoq_or_releasing_bd
                & HW_MEMORY_NDP[HDP] != 0b2_00
                & turn = HW_tx
                :
                0b1_0;
            HDP = 0b2_10
                & tx_state = tx_releasing_bd & turn = HW_tx
                :
                0b1_0;
            HDP = 0b2_10
                & td_state = td_releasing_bd & turn = HW_td
                :
                0b1_0;
            HW_MEMORY_START = 0b2_10
                & transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                0b1_1;
            new_bd = 0b2_10
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                0b1_1;
            TRUE : HW_MEMORY_OWN[2];
        esac;
    next(HW_MEMORY_OWN[3]) :=
        case
            HDP = 0b2_11
                & tx_state = tx_setting_eoq_or_releasing_bd
                & HW_MEMORY_NDP[HDP] != 0b2_00
                & turn = HW_tx
                :
                0b1_0;
            HDP = 0b2_11
                & tx_state = tx_releasing_bd & turn = HW_tx
                :
                0b1_0;
            HDP = 0b2_11
                & td_state = td_releasing_bd & turn = HW_td
                :
                0b1_0;
            HW_MEMORY_START = 0b2_11
                & transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                0b1_1;
            new_bd = 0b2_11
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                0b1_1;
            TRUE : HW_MEMORY_OWN[3];
        esac;

    -- Memory EOQ array
    next(HW_MEMORY_EOQ[1]) :=
        case
            HDP = 0b2_01
                & tx_state = tx_setting_eoq_or_releasing_bd
                & HW_MEMORY_NDP[HDP] = 0b2_00
                & turn = HW_tx
                :
                0b1_1;
            HDP = 0b2_01
                & td_state = td_waiting_for_tx
                & tx_state = tx_idle
                & HDP != 0b2_00
                & turn = HW_td
                :
                0b1_1;
            HW_MEMORY_START = 0b2_01
                & transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                0b1_0;
            new_bd = 0b2_01
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                0b1_0;
            TRUE : HW_MEMORY_EOQ[1];
        esac;
    next(HW_MEMORY_EOQ[2]) :=
        case
            HDP = 0b2_10
                & tx_state = tx_setting_eoq_or_releasing_bd
                & HW_MEMORY_NDP[HDP] = 0b2_00
                & turn = HW_tx
                :
                0b1_1;
            HDP = 0b2_10
                & td_state = td_waiting_for_tx
                & tx_state = tx_idle
                & HDP != 0b2_00
                & turn = HW_td
                :
                0b1_1;
            HW_MEMORY_START = 0b2_10
                & transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                0b1_0;
            new_bd = 0b2_10
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                0b1_0;
            TRUE : HW_MEMORY_EOQ[2];
        esac;
    next(HW_MEMORY_EOQ[3]) :=
        case
            HDP = 0b2_11
                & tx_state = tx_setting_eoq_or_releasing_bd
                & HW_MEMORY_NDP[HDP] = 0b2_00
                & turn = HW_tx
                :
                0b1_1;
            HDP = 0b2_11
                & td_state = td_waiting_for_tx
                & tx_state = tx_idle
                & HDP != 0b2_00
                & turn = HW_td
                :
                0b1_1;
            HW_MEMORY_START = 0b2_11
                & transmit_state = transmit_bad_buffer_or_queue_full_or_not_queue_full
                & !TRANSMIT_BAD_BUFFER_OR_QUEUE_FULL
                & HDP = 0b2_00 & turn = software
                :
                0b1_0;
            new_bd = 0b2_11
                & transmit_state = transmit_updated_new_bd & turn = software
                :
                0b1_0;
            TRUE : HW_MEMORY_EOQ[3];
        esac;

-- CTL formulas

-- It is always possible for the model to sooner or later make transitions
-- that describe the operations of open(), transmit(), and stop().
CTLSPEC AG(
    open_state = open_idle -> AF(open_state != open_idle)
    & transmit_state = transmit_idle -> AF(transmit_state != transmit_idle)
    & stop_state = stop_idle -> AF(stop_state != stop_idle)
);

-- It is always possible for the model to sooner or later make transitions
-- that describe the initialization, transmission and tear down operations
-- of the transmitter.
CTLSPEC AG(
    it_state = it_idle -> AF(it_state != it_idle)
    & tx_state = tx_idle -> AF(tx_state != tx_idle)
    & td_state = td_idle -> AF(td_state != td_idle)
);

-- open(), transmit(), stop() cannot be executed simultaneously.
CTLSPEC AG(
    open_state = open_idle & transmit_state = transmit_idle & stop_state = stop_idle
    | open_state != open_idle & transmit_state = transmit_idle & stop_state = stop_idle
    | open_state = open_idle & transmit_state != transmit_idle & stop_state = stop_idle
    | open_state = open_idle & transmit_state = transmit_idle & stop_state != stop_idle
);

-- If the transmitter is resetting itself, then the transmitter does not
-- transmit nor performs a tear down.
CTLSPEC AG(
    it_state = it_resetting -> (tx_state = tx_idle & td_state = td_idle)
);

-- If the transmitter transmits, then the transmitter is not performing a
-- reset.
CTLSPEC AG(
    tx_state != tx_idle -> (it_state = it_idle)
);

-- If the transmitter transmits, then the transmitter is not performing a
-- tear down or the tear down is waiting for the transmission to finish.
CTLSPEC AG(
    tx_state != tx_idle -> (td_state = td_idle | td_state = td_waiting_for_tx)
);

-- If the transmitter performs a tear down, then the transmitter is not
-- performing a reset.
CTLSPEC AG(
    td_state != td_idle -> (it_state = it_idle)
);

-- If the transmitter performs a reset, then open is currently executed.
CTLSPEC AG(
    it_state != it_idle -> (open_state != open_idle)
);

-- If the transmitter performs a tear down, then stop is currently executed.
CTLSPEC AG(
    td_state != td_idle -> (stop_state != stop_idle)
);

-- (4.6.1) Transmitter clears RESET after resetting.
-- Specifications must be checked.
CTLSPEC AG(
    (it_state = it_resetting & AX(it_state) != it_resetting)
    -> AX(RESET) = 0b1_0
);

-- (4.6.2) Tear down clears TEARDOWN after tearing down.
-- Specifications must be checked.
CTLSPEC AG(
    (td_state = td_waiting_for_tx & tx_state = tx_idle & HDP = 0b2_00 & turn = HW_td)
    | (td_state = td_clearing_td & turn = HW_td) -> AX(TEARDOWN) = 0b1_0
);

-- (4.6.3) HDP is never written to when initialization, transmission or
-- teardown are not idle. This happening is a specified error.
CTLSPEC AG(
    (it_state != it_idle | tx_state != tx_idle | td_state != td_idle)
    -> AX(HDP) = HDP
);

-- (4.7) Transmitter never performs an undefined operation.
CTLSPEC AG(!dead);

-- (4.7.1) Driver queue property:
-- Queues only change on driver's (= software) turn
CTLSPEC AG(
    turn != software -> AX(queue_head) = queue_head & AX(queue_tail) = queue_tail
);

-- (4.7.2) Transmitter buffer property:
-- Buffer always stays inside RAM and never overflows
-- Surprisinlgy this does not hold, it appears that buffer length is 2 bits
-- but so are address space and memory size.
-- CTLSPEC AG(
--     TX_BUFFER_INSIDE_RAM & !TX_BUFFER_OVERFLOW
-- );
